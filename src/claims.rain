version: 2

networks:
  base:
    rpcs:
      - https://base-rpc.publicnode.com
    chain-id: 8453
    network-id: 8453
    currency: ETH
  polygon:
    rpcs:
      - https://polygon-rpc.com
    chain-id: 137
    network-id: 137
    currency: POL

subgraphs:
  base: https://example.com/subgraph
  polygon: https://example.com/subgraph


metaboards:
  base: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/metadata-base/2025-07-06-594f/gn
  polygon: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/ob4-matic/2024-12-13-d2b4/gn

orderbooks:
  base:
    address: 0xd2938e7c9fe3597f78832ce780feb61945c377d7
  polygon:
    address: 0x7D2f700b1f6FD75734824EA4578960747bdF269A

deployers:
  base:
    address: 0xC1A14cE2fd58A3A2f99deCb8eDd866204eE07f8D
  polygon:
    address: 0xE7116BC05C8afe25e5B54b813A74F916B5D42aB1

orders:
  base:
    orderbook: base
    network: base
    inputs:
      # Input is irrelevant because we always set the IO ratio to 0.
      - token: input
    outputs:
      - token: output
  polygon:
    orderbook: polygon
    network: polygon
    inputs:
      # Input is irrelevant because we always set the IO ratio to 0.
      - token: input
    outputs:
      - token: output

scenarios:
  base:
    orderbook: base
    runs: 1
    bindings:
      raindex-subparser: 0x662dFd6d5B6DF94E07A60954901D3001c24F856a
      merkle-words: 0x8ceC9e3Ec2F8838000b91CfB97403A6Bb0F4036A
  polygon:
    orderbook: polygon
    runs: 1
    bindings:
      raindex-subparser: 0xF9323B7d23c655122Fb0272D989b83E105cBcf9d
      merkle-words: 0x5F0D7f1995504eE43F02b9D13ce3a19cd5Bdd9B0

deployments:
  base:
    order: base
    scenario: base
  polygon:
    order: polygon
    scenario: polygon

gui:
  name: Claims
  description: Verifies merkle proofs against a set merkle root and distributes claims
  short-description: The order owner sets the merkle root at deploy time, the order taker then claims the output tokens by submitting the proof and the expected reward.
  deployments:
    base:
      name: Claims on Base.
      description:
        A simple strategy that distributes rewards by verifying the proofs submitted
      deposits:
        - token: output
      fields:
        - binding: root
          name: Merkle tree root
      select-tokens:
        - key: output
          name: Output Token
        - key: input
          name: Input Token
    polygon:
      name: Claims on Polygon.
      description:
        A simple strategy that distributes rewards by verifying the proofs submitted
      deposits:
        - token: output
      fields:
        - binding: root
          name: Merkle tree root
      select-tokens:
        - key: output
          name: Output Token
        - key: input
          name: Input Token

---

#raindex-subparser !The subparser to use.
#merkle-words !The subparser for merkle words.
#root !Order Root
#claimed-key "claimed"

/* Compute hash of leaf node */
#get-leaf-node
  /**
  * signed-context<0 0> is the leaf index
  * order-counterparty() is the order taker who is claiming the reward
  * signed-context<0 1> is the expected claim amount
  *
  * All the leaves of the merkle tree are computed by precisely these,
  * hence the order taker MUST provide the index and the expected amount in the signed context.
  */
  _: hash(signed-context<0 0>() order-counterparty() signed-context<0 1>());

#check-claim
  leaf-node: ,
  :ensure(
    equal-to(
      get(hash(order-hash() leaf-node claimed-key))
      0
    )
    "Claimed"
  );


#verify-proof
  leaf-node: ,
  /**
  * Verifies merkle proof using signed context parameters: 
  * signed-context<0 2-9>: Merkle proof components for merkle tree with depth 8
  */
  is-valid-proof: merkle-proof-verify(
    root
    leaf-node
    signed-context<0 2>()
    signed-context<0 3>()
    signed-context<0 4>()
    signed-context<0 5>()
    signed-context<0 6>()
    signed-context<0 7>()
    signed-context<0 8>()
    signed-context<0 9>()
  ),
  :ensure(
    is-valid-proof
    "Proof"
  );

#calculate-io
  using-words-from raindex-subparser merkle-words

  expected-amount: signed-context<0 1>(),
  leaf-node: call<'get-leaf-node>(),
  :call<'check-claim>(leaf-node),
  :call<'verify-proof>(leaf-node),
  _: expected-amount,
  _: 0;

#handle-io
  expected-amount: signed-context<0 1>(),
  leaf-node: call<'get-leaf-node>(),
  :ensure(
      equal-to(
        output-vault-decrease()
        expected-amount
      )
      "Expected claim"
  ),
  :set(hash(order-hash() leaf-node claimed-key) 1);

#handle-add-order
  :;