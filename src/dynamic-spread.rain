version: 1

scenarios:
  arbitrum:
    orderbook: arbitrum
    runs: 1
    bindings:
      raindex-subparser: 0xb06202aA3Fe7d85171fB7aA5f17011d17E63f382
      history-cap: '1e50'
      shy-epoch: 0.05
      amount-token: ${order.inputs.0.token.address}
      initial-output-token: ${order.outputs.1.token.address}
      initial-input-token: ${order.inputs.0.token.address}
  base:
    orderbook: base
    runs: 1
    bindings:
      raindex-subparser: 0x662dFd6d5B6DF94E07A60954901D3001c24F856a
      history-cap: '1e50'
      shy-epoch: 0.05
      amount-token: ${order.inputs.0.token.address}
      initial-output-token: ${order.outputs.1.token.address}
      initial-input-token: ${order.inputs.0.token.address}
  flare:
    orderbook: flare
    runs: 1
    bindings:
      raindex-subparser: 0xFe2411CDa193D9E4e83A5c234C7Fd320101883aC
      history-cap: '1e50'
      shy-epoch: 0.05
      amount-token: ${order.inputs.0.token.address}
      initial-output-token: ${order.outputs.1.token.address}
      initial-input-token: ${order.inputs.0.token.address}
  polygon:
    orderbook: polygon
    runs: 1
    bindings:
      raindex-subparser: 0xF9323B7d23c655122Fb0272D989b83E105cBcf9d
      history-cap: '1e50'
      shy-epoch: 0.05
      amount-token: ${order.inputs.0.token.address}
      initial-output-token: ${order.outputs.1.token.address}
      initial-input-token: ${order.inputs.0.token.address}
  bsc:
    orderbook: bsc
    runs: 1
    bindings:
      raindex-subparser: 0x662dFd6d5B6DF94E07A60954901D3001c24F856a
      history-cap: '1e50'
      shy-epoch: 0.05
      amount-token: ${order.inputs.0.token.address}
      initial-output-token: ${order.outputs.1.token.address}
      initial-input-token: ${order.inputs.0.token.address}
  ethereum:
    orderbook: ethereum
    runs: 1
    bindings:
      raindex-subparser: 0x22410e2a46261a1B1e3899a072f303022801C764
      history-cap: '1e50'
      shy-epoch: 0.05
      amount-token: ${order.inputs.0.token.address}
      initial-output-token: ${order.outputs.1.token.address}
      initial-input-token: ${order.inputs.0.token.address}
  linea:
    orderbook: linea
    runs: 1
    bindings:
      raindex-subparser: 0xF77b3c3f61af5a3cE7f7CE3cfFc117491104432E
      history-cap: '1e50'
      shy-epoch: 0.05
      amount-token: ${order.inputs.0.token.address}
      initial-output-token: ${order.outputs.1.token.address}
      initial-input-token: ${order.inputs.0.token.address}

networks:
  flare:
    rpc: https://flare.rpc.thirdweb.com
    chain-id: 14
    network-id: 14
    currency: FLR
  base:
    rpc: https://base-rpc.publicnode.com
    chain-id: 8453
    network-id: 8453
    currency: ETH
  arbitrum:
    rpc: https://1rpc.io/arb
    chain-id: 42161
    network-id: 42161
    currency: ETH
  polygon:
    rpc: https://1rpc.io/matic
    chain-id: 137
    network-id: 137
    currency: POL
  bsc:
    rpc: https://bsc-dataseed.bnbchain.org
    chain-id: 56
    network-id: 56
    currency: BNB
  ethereum:
    rpc: https://1rpc.io/eth
    chain-id: 1
    network-id: 1
    currency: ETH
  linea:
    rpc: https://rpc.linea.build
    chain-id: 59144
    network-id: 59144
    currency: ETH

metaboards:
  flare: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-flare-0x893BBFB7/0.1/gn
  base: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-base-0x59401C93/0.1/gn
  arbitrum: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-arbitrum/0.1/gn
  polygon: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-polygon/0.1/gn
  bsc: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-bsc/0.1/gn
  ethereum: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/metadata-mainnet/2024-10-25-2857/gn
  linea: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-linea-0xed7d6156/1.0.0/gn

subgraphs:
  flare: https://example.com/subgraph
  base: https://example.com/subgraph
  arbitrum: https://example.com/subgraph
  polygon: https://example.com/subgraph
  bsc: https://example.com/subgraph
  ethereum: https://example.com/subgraph
  linea: https://example.com/subgraph

orderbooks:
  flare:
    address: 0xCEe8Cd002F151A536394E564b84076c41bBBcD4d
  base:
    address: 0xd2938e7c9fe3597f78832ce780feb61945c377d7
  arbitrum:
    address: 0x550878091b2B1506069F61ae59e3A5484Bca9166
  polygon:
    address: 0x7D2f700b1f6FD75734824EA4578960747bdF269A
  bsc:
    address: 0xd2938E7c9fe3597F78832CE780Feb61945c377d7
  ethereum:
    address: 0x0eA6d458488d1cf51695e1D6e4744e6FB715d37C
  linea:
    address: 0x22410e2a46261a1B1e3899a072f303022801C764

deployers:
  flare:
    address: 0xE3989Ea7486c0F418C764e6c511e86f6E8830FAb
  base:
    address: 0xC1A14cE2fd58A3A2f99deCb8eDd866204eE07f8D
  arbitrum:
    address: 0x9B0D254bd858208074De3d2DaF5af11b3D2F377F
  polygon:
    address: 0xE7116BC05C8afe25e5B54b813A74F916B5D42aB1
  ethereum:
    address: 0xd19581a021f4704ad4eBfF68258e7A0a9DB1CD77
  linea:
    address: 0xA2f56F8F74B7d04d61f281BE6576b6155581dcBA
  bsc:
    address: 0xA2f56F8F74B7d04d61f281BE6576b6155581dcBA

orders:
  arbitrum:
    orderbook: arbitrum
    inputs:
      - token: token1
      - token: token2
    outputs:
      - token: token1
      - token: token2
  base:
    orderbook: base
    inputs:
      - token: token1
      - token: token2
    outputs:
      - token: token1
      - token: token2
  flare:
    orderbook: flare
    inputs:
      - token: token1
      - token: token2
    outputs:
      - token: token1
      - token: token2
  polygon:
    orderbook: polygon
    inputs:
      - token: token1
      - token: token2
    outputs:
      - token: token1
      - token: token2
  bsc:
    orderbook: bsc
    inputs:
      - token: token1
      - token: token2
    outputs:
      - token: token1
      - token: token2
  ethereum:
    orderbook: ethereum
    inputs:
      - token: token1
      - token: token2
    outputs:
      - token: token1
      - token: token2
  linea:
    orderbook: linea
    inputs:
      - token: token1
      - token: token2
    outputs:
      - token: token1
      - token: token2

deployments:
  arbitrum:
    order: arbitrum
    scenario: arbitrum
  base:
    order: base
    scenario: base
  flare:
    order: flare
    scenario: flare
  polygon:
    order: polygon
    scenario: polygon
  bsc:
    order: bsc
    scenario: bsc
  ethereum:
    order: ethereum
    scenario: ethereum
  linea:
    order: linea
    scenario: linea

gui:
  name: Two-sided dynamic spread strategies
  description: https://raw.githubusercontent.com/rainlanguage/rain.strategies/e25bc4876b5ffb8bb28097b0ca66de291c75ff56/src/dynamic-spread.md
  short-description: A market-making strategy that offers two-sided auction-based spreads that narrow over time, with a defensive feature that quickly exits positions by counter-trading when market trends emerge.
  deployments:
    arbitrum:
      name: Arbitrum
      description: Deploy a two-sided dynamic spread strategy on Arbitrum.
      fields:
        - binding: amount-is-fast-exit
          name: Fast exit ${order.inputs.0.token.symbol}?
          description: If enabled, the strategy will attempt to exit any ${order.inputs.0.token.symbol} position it builds up in a single trade, as soon as it can do so profitably.
          presets:
            - name: Yes
              value: 1
            - name: No
              value: 0
        - binding: not-amount-is-fast-exit
          name: Fast exit ${order.inputs.1.token.symbol}?
          description: If enabled, the strategy will attempt to exit any ${order.inputs.1.token.symbol} position it builds up in a single trade, as soon as it can do so profitably.
          presets:
            - name: Yes
              value: 1
            - name: No
              value: 0
        - binding: initial-io
          name: Initial price (${order.inputs.0.token.symbol} per ${order.inputs.1.token.symbol})
          description: This should be the ${order.inputs.0.token.symbol} price you see for ${order.inputs.1.token.symbol} on Dextools.
        - binding: next-trade-multiplier
          name: Next trade multiplier
          description: This is the most the strategy will move the price in a single trade. Larger numbers will capture larger price jumps but trade less often, smaller numbers will trade more often but be less defensive against large price jumps in the market.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
        - binding: cost-basis-multiplier
          name: Cost basis multiplier
          description: The minimum spread applied to the breakeven in addition to the auction. This is applied in both directions so 1.01x would be a 2% total spread.
          show-custom-field: true
          default: 1
          presets:
            - name: 1 (auction spread only)
              value: 1
            - name: 1.0005x (0.1% total)
              value: 1.0005
            - name: 1.001x (0.2% total)
              value: 1.001
            - name: 1.0025x (0.5% total)
              value: 1.0025
            - name: 1.005x (1% total)
              value: 1.005
        - binding: time-per-epoch
          name: Time per price halving (seconds)
          description: The amount of time (in seconds) between halvings of the price and the amount offered during each auction, relative to their baselines.
          show-custom-field: true
          default: 3600
          presets:
            - name: 1 hour (3600)
              value: 3600
            - name: 2 hours (7200)
              value: 7200
            - name: 4 hours (14400)
              value: 14400
            - name: 8 hours (28800)
              value: 28800
        - binding: max-amount
          name: Max amount
          description: The maximum amount of ${order.inputs.0.token.symbol} that will be offered in a single auction.
        - binding: min-amount
          name: Minimum amount
          description: The minimum amount of ${order.inputs.0.token.symbol} that will be offered in a single auction.
      deposits:
        - token: token1
        - token: token2
      select-tokens:
        - key: token1
          name: First token to rotate
          description: Select the token you want to rotate. This will be the amount token that denominates trade sizes.
        - key: token2
          name: Second token to rotate
          description: Select the token you want to rotate.
    base:
      name: Base
      description: Deploy a two-sided dynamic spread strategy on Base.
      fields:
        - binding: amount-is-fast-exit
          name: Fast exit ${order.inputs.0.token.symbol}?
          description: If enabled, the strategy will attempt to exit any ${order.inputs.0.token.symbol} position it builds up in a single trade, as soon as it can do so profitably.
          presets:
            - name: Yes
              value: 1
            - name: No
              value: 0
        - binding: not-amount-is-fast-exit
          name: Fast exit ${order.inputs.1.token.symbol}?
          description: If enabled, the strategy will attempt to exit any ${order.inputs.1.token.symbol} position it builds up in a single trade, as soon as it can do so profitably.
          presets:
            - name: Yes
              value: 1
            - name: No
              value: 0
        - binding: initial-io
          name: Initial price (${order.inputs.0.token.symbol} per ${order.inputs.1.token.symbol})
          description: This should be the ${order.inputs.0.token.symbol} price you see for ${order.inputs.1.token.symbol} on Dextools.
        - binding: next-trade-multiplier
          name: Next trade multiplier
          description: This is the most the strategy will move the price in a single trade. Larger numbers will capture larger price jumps but trade less often, smaller numbers will trade more often but be less defensive against large price jumps in the market.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
        - binding: cost-basis-multiplier
          name: Cost basis multiplier
          description: The minimum spread applied to the breakeven in addition to the auction. This is applied in both directions so 1.01x would be a 2% total spread.
          show-custom-field: true
          default: 1
          presets:
            - name: 1 (auction spread only)
              value: 1
            - name: 1.0005x (0.1% total)
              value: 1.0005
            - name: 1.001x (0.2% total)
              value: 1.001
            - name: 1.0025x (0.5% total)
              value: 1.0025
            - name: 1.005x (1% total)
              value: 1.005
        - binding: time-per-epoch
          name: Time per price halving (seconds)
          description: The amount of time (in seconds) between halvings of the price and the amount offered during each auction, relative to their baselines.
          show-custom-field: true
          default: 3600
          presets:
            - name: 1 hour (3600)
              value: 3600
            - name: 2 hours (7200)
              value: 7200
            - name: 4 hours (14400)
              value: 14400
            - name: 8 hours (28800)
              value: 28800
        - binding: max-amount
          name: Max amount
          description: The maximum amount of ${order.inputs.0.token.symbol} that will be offered in a single auction.
        - binding: min-amount
          name: Minimum amount
          description: The minimum amount of ${order.inputs.0.token.symbol} that will be offered in a single auction.
      deposits:
        - token: token1
        - token: token2
      select-tokens:
        - key: token1
          name: First token to rotate
          description: Select the token you want to rotate. This will be the amount token that denominates trade sizes.
        - key: token2
          name: Second token to rotate
          description: Select the token you want to rotate.
    flare:
      name: Flare
      description: Deploy a two-sided dynamic spread strategy on Flare.
      fields:
        - binding: amount-is-fast-exit
          name: Fast exit ${order.inputs.0.token.symbol}?
          description: If enabled, the strategy will attempt to exit any ${order.inputs.0.token.symbol} position it builds up in a single trade, as soon as it can do so profitably.
          presets:
            - name: Yes
              value: 1
            - name: No
              value: 0
        - binding: not-amount-is-fast-exit
          name: Fast exit ${order.inputs.1.token.symbol}?
          description: If enabled, the strategy will attempt to exit any ${order.inputs.1.token.symbol} position it builds up in a single trade, as soon as it can do so profitably.
          presets:
            - name: Yes
              value: 1
            - name: No
              value: 0
        - binding: initial-io
          name: Initial price (${order.inputs.0.token.symbol} per ${order.inputs.1.token.symbol})
          description: This should be the ${order.inputs.0.token.symbol} price you see for ${order.inputs.1.token.symbol} on Dextools.
        - binding: next-trade-multiplier
          name: Next trade multiplier
          description: This is the most the strategy will move the price in a single trade. Larger numbers will capture larger price jumps but trade less often, smaller numbers will trade more often but be less defensive against large price jumps in the market.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
        - binding: cost-basis-multiplier
          name: Cost basis multiplier
          description: The minimum spread applied to the breakeven in addition to the auction. This is applied in both directions so 1.01x would be a 2% total spread.
          show-custom-field: true
          default: 1
          presets:
            - name: 1 (auction spread only)
              value: 1
            - name: 1.0005x (0.1% total)
              value: 1.0005
            - name: 1.001x (0.2% total)
              value: 1.001
            - name: 1.0025x (0.5% total)
              value: 1.0025
            - name: 1.005x (1% total)
              value: 1.005
        - binding: time-per-epoch
          name: Time per price halving (seconds)
          description: The amount of time (in seconds) between halvings of the price and the amount offered during each auction, relative to their baselines.
          show-custom-field: true
          default: 3600
          presets:
            - name: 1 hour (3600)
              value: 3600
            - name: 2 hours (7200)
              value: 7200
            - name: 4 hours (14400)
              value: 14400
            - name: 8 hours (28800)
              value: 28800
        - binding: max-amount
          name: Max amount
          description: The maximum amount of ${order.inputs.0.token.symbol} that will be offered in a single auction.
        - binding: min-amount
          name: Minimum amount
          description: The minimum amount of ${order.inputs.0.token.symbol} that will be offered in a single auction.
      deposits:
        - token: token1
        - token: token2
      select-tokens:
        - key: token1
          name: First token to rotate
          description: Select the token you want to rotate. This will be the amount token that denominates trade sizes.
        - key: token2
          name: Second token to rotate
          description: Select the token you want to rotate.
    polygon:
      name: Polygon
      description: Deploy a two-sided dynamic spread strategy on Polygon.
      fields:
        - binding: amount-is-fast-exit
          name: Fast exit ${order.inputs.0.token.symbol}?
          description: If enabled, the strategy will attempt to exit any ${order.inputs.0.token.symbol} position it builds up in a single trade, as soon as it can do so profitably.
          presets:
            - name: Yes
              value: 1
            - name: No
              value: 0
        - binding: not-amount-is-fast-exit
          name: Fast exit ${order.inputs.1.token.symbol}?
          description: If enabled, the strategy will attempt to exit any ${order.inputs.1.token.symbol} position it builds up in a single trade, as soon as it can do so profitably.
          presets:
            - name: Yes
              value: 1
            - name: No
              value: 0
        - binding: initial-io
          name: Initial price (${order.inputs.0.token.symbol} per ${order.inputs.1.token.symbol})
          description: This should be the ${order.inputs.0.token.symbol} price you see for ${order.inputs.1.token.symbol} on Dextools.
        - binding: next-trade-multiplier
          name: Next trade multiplier
          description: This is the most the strategy will move the price in a single trade. Larger numbers will capture larger price jumps but trade less often, smaller numbers will trade more often but be less defensive against large price jumps in the market.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
        - binding: cost-basis-multiplier
          name: Cost basis multiplier
          description: The minimum spread applied to the breakeven in addition to the auction. This is applied in both directions so 1.01x would be a 2% total spread.
          show-custom-field: true
          default: 1
          presets:
            - name: 1 (auction spread only)
              value: 1
            - name: 1.0005x (0.1% total)
              value: 1.0005
            - name: 1.001x (0.2% total)
              value: 1.001
            - name: 1.0025x (0.5% total)
              value: 1.0025
            - name: 1.005x (1% total)
              value: 1.005
        - binding: time-per-epoch
          name: Time per price halving (seconds)
          description: The amount of time (in seconds) between halvings of the price and the amount offered during each auction, relative to their baselines.
          show-custom-field: true
          default: 3600
          presets:
            - name: 1 hour (3600)
              value: 3600
            - name: 2 hours (7200)
              value: 7200
            - name: 4 hours (14400)
              value: 14400
            - name: 8 hours (28800)
              value: 28800
        - binding: max-amount
          name: Max amount
          description: The maximum amount of ${order.inputs.0.token.symbol} that will be offered in a single auction.
        - binding: min-amount
          name: Minimum amount
          description: The minimum amount of ${order.inputs.0.token.symbol} that will be offered in a single auction.
      deposits:
        - token: token1
        - token: token2
      select-tokens:
        - key: token1
          name: First token to rotate
          description: Select the token you want to rotate. This will be the amount token that denominates trade sizes.
        - key: token2
          name: Second token to rotate
          description: Select the token you want to rotate.
    bsc:
      name: BSC
      description: Deploy a two-sided dynamic spread strategy on BSC.
      fields:
        - binding: amount-is-fast-exit
          name: Fast exit ${order.inputs.0.token.symbol}?
          description: If enabled, the strategy will attempt to exit any ${order.inputs.0.token.symbol} position it builds up in a single trade, as soon as it can do so profitably.
          presets:
            - name: Yes
              value: 1
            - name: No
              value: 0
        - binding: not-amount-is-fast-exit
          name: Fast exit ${order.inputs.1.token.symbol}?
          description: If enabled, the strategy will attempt to exit any ${order.inputs.1.token.symbol} position it builds up in a single trade, as soon as it can do so profitably.
          presets:
            - name: Yes
              value: 1
            - name: No
              value: 0
        - binding: initial-io
          name: Initial price (${order.inputs.0.token.symbol} per ${order.inputs.1.token.symbol})
          description: This should be the ${order.inputs.0.token.symbol} price you see for ${order.inputs.1.token.symbol} on Dextools.
        - binding: next-trade-multiplier
          name: Next trade multiplier
          description: This is the most the strategy will move the price in a single trade. Larger numbers will capture larger price jumps but trade less often, smaller numbers will trade more often but be less defensive against large price jumps in the market.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
        - binding: cost-basis-multiplier
          name: Cost basis multiplier
          description: The minimum spread applied to the breakeven in addition to the auction. This is applied in both directions so 1.01x would be a 2% total spread.
          show-custom-field: true
          default: 1
          presets:
            - name: 1 (auction spread only)
              value: 1
            - name: 1.0005x (0.1% total)
              value: 1.0005
            - name: 1.001x (0.2% total)
              value: 1.001
            - name: 1.0025x (0.5% total)
              value: 1.0025
            - name: 1.005x (1% total)
              value: 1.005
        - binding: time-per-epoch
          name: Time per price halving (seconds)
          description: The amount of time (in seconds) between halvings of the price and the amount offered during each auction, relative to their baselines.
          show-custom-field: true
          default: 3600
          presets:
            - name: 1 hour (3600)
              value: 3600
            - name: 2 hours (7200)
              value: 7200
            - name: 4 hours (14400)
              value: 14400
            - name: 8 hours (28800)
              value: 28800
        - binding: max-amount
          name: Max amount
          description: The maximum amount of ${order.inputs.0.token.symbol} that will be offered in a single auction.
        - binding: min-amount
          name: Minimum amount
          description: The minimum amount of ${order.inputs.0.token.symbol} that will be offered in a single auction.
      deposits:
        - token: token1
        - token: token2
      select-tokens:
        - key: token1
          name: First token to rotate
          description: Select the token you want to rotate. This will be the amount token that denominates trade sizes.
        - key: token2
          name: Second token to rotate
          description: Select the token you want to rotate.
    ethereum:
      name: Ethereum
      description: Deploy a two-sided dynamic spread strategy on Ethereum.
      fields:
        - binding: amount-is-fast-exit
          name: Fast exit ${order.inputs.0.token.symbol}?
          description: If enabled, the strategy will attempt to exit any ${order.inputs.0.token.symbol} position it builds up in a single trade, as soon as it can do so profitably.
          presets:
            - name: Yes
              value: 1
            - name: No
              value: 0
        - binding: not-amount-is-fast-exit
          name: Fast exit ${order.inputs.1.token.symbol}?
          description: If enabled, the strategy will attempt to exit any ${order.inputs.1.token.symbol} position it builds up in a single trade, as soon as it can do so profitably.
          presets:
            - name: Yes
              value: 1
            - name: No
              value: 0
        - binding: initial-io
          name: Initial price (${order.inputs.0.token.symbol} per ${order.inputs.1.token.symbol})
          description: This should be the ${order.inputs.0.token.symbol} price you see for ${order.inputs.1.token.symbol} on Dextools.
        - binding: next-trade-multiplier
          name: Next trade multiplier
          description: This is the most the strategy will move the price in a single trade. Larger numbers will capture larger price jumps but trade less often, smaller numbers will trade more often but be less defensive against large price jumps in the market.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
        - binding: cost-basis-multiplier
          name: Cost basis multiplier
          description: The minimum spread applied to the breakeven in addition to the auction. This is applied in both directions so 1.01x would be a 2% total spread.
          show-custom-field: true
          default: 1
          presets:
            - name: 1 (auction spread only)
              value: 1
            - name: 1.0005x (0.1% total)
              value: 1.0005
            - name: 1.001x (0.2% total)
              value: 1.001
            - name: 1.0025x (0.5% total)
              value: 1.0025
            - name: 1.005x (1% total)
              value: 1.005
        - binding: time-per-epoch
          name: Time per price halving (seconds)
          description: The amount of time (in seconds) between halvings of the price and the amount offered during each auction, relative to their baselines.
          show-custom-field: true
          default: 3600
          presets:
            - name: 1 hour (3600)
              value: 3600
            - name: 2 hours (7200)
              value: 7200
            - name: 4 hours (14400)
              value: 14400
            - name: 8 hours (28800)
              value: 28800
        - binding: max-amount
          name: Max amount
          description: The maximum amount of ${order.inputs.0.token.symbol} that will be offered in a single auction.
        - binding: min-amount
          name: Minimum amount
          description: The minimum amount of ${order.inputs.0.token.symbol} that will be offered in a single auction.
      deposits:
        - token: token1
        - token: token2
      select-tokens:
        - key: token1
          name: First token to rotate
          description: Select the token you want to rotate. This will be the amount token that denominates trade sizes.
        - key: token2
          name: Second token to rotate
          description: Select the token you want to rotate.
    linea:
      name: Linea
      description: Deploy a two-sided dynamic spread strategy on Linea.
      fields:
        - binding: amount-is-fast-exit
          name: Fast exit ${order.inputs.0.token.symbol}?
          description: If enabled, the strategy will attempt to exit any ${order.inputs.0.token.symbol} position it builds up in a single trade, as soon as it can do so profitably.
          presets:
            - name: Yes
              value: 1
            - name: No
              value: 0
        - binding: not-amount-is-fast-exit
          name: Fast exit ${order.inputs.1.token.symbol}?
          description: If enabled, the strategy will attempt to exit any ${order.inputs.1.token.symbol} position it builds up in a single trade, as soon as it can do so profitably.
          presets:
            - name: Yes
              value: 1
            - name: No
              value: 0
        - binding: initial-io
          name: Initial price (${order.inputs.0.token.symbol} per ${order.inputs.1.token.symbol})
          description: This should be the ${order.inputs.0.token.symbol} price you see for ${order.inputs.1.token.symbol} on Dextools.
        - binding: next-trade-multiplier
          name: Next trade multiplier
          description: This is the most the strategy will move the price in a single trade. Larger numbers will capture larger price jumps but trade less often, smaller numbers will trade more often but be less defensive against large price jumps in the market.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
        - binding: cost-basis-multiplier
          name: Cost basis multiplier
          description: The minimum spread applied to the breakeven in addition to the auction. This is applied in both directions so 1.01x would be a 2% total spread.
          show-custom-field: true
          default: 1
          presets:
            - name: 1 (auction spread only)
              value: 1
            - name: 1.0005x (0.1% total)
              value: 1.0005
            - name: 1.001x (0.2% total)
              value: 1.001
            - name: 1.0025x (0.5% total)
              value: 1.0025
            - name: 1.005x (1% total)
              value: 1.005
        - binding: time-per-epoch
          name: Time per price halving (seconds)
          description: The amount of time (in seconds) between halvings of the price and the amount offered during each auction, relative to their baselines.
          show-custom-field: true
          default: 3600
          presets:
            - name: 1 hour (3600)
              value: 3600
            - name: 2 hours (7200)
              value: 7200
            - name: 4 hours (14400)
              value: 14400
            - name: 8 hours (28800)
              value: 28800
        - binding: max-amount
          name: Max amount
          description: The maximum amount of ${order.inputs.0.token.symbol} that will be offered in a single auction.
        - binding: min-amount
          name: Minimum amount
          description: The minimum amount of ${order.inputs.0.token.symbol} that will be offered in a single auction.
      deposits:
        - token: token1
        - token: token2
      select-tokens:
        - key: token1
          name: First token to rotate
          description: Select the token you want to rotate. This will be the amount token that denominates trade sizes.
        - key: token2
          name: Second token to rotate
          description: Select the token you want to rotate.
---
#raindex-subparser !Subparser for the Raindex.

#min-amount !Amount will decay down to this number each epoch.
#max-amount !Amount will decay down from this number each epoch.
#time-per-epoch !Duration of one unit of streaming amount and io ratio halflife.
#shy-epoch !Epoch below which only the minimum amount is offered.
#next-trade-multiplier !Start next auction at this x the last trade.
#history-cap !The max amount of trade history kept for cost basis tracking (denominated in same token as tranche size).
#amount-token !The token that is the amount token for the strategy. This denominates tranche sizes.
#initial-io !The IO ratio that the strategy starts at. The quote token is the output so that the IO ratio looks like a CEX price.
#initial-output-token !Initial output token for the initial IO ratio.
#initial-input-token !Initial input token for the initial IO ratio.
#cost-basis-multiplier !Multiplier for the cost basis IO ratio. Effectively a minimum spread.

#amount-is-fast-exit !Non-zero for fast exit behaviour where the amount token is the fast exit token.
#not-amount-is-fast-exit !Non-zero for fast exit behaviour where the not amount token is the fast exit token.

#last-trade-io-key "last-trade-io"
#last-trade-time-key "last-trade-time"
#last-trade-output-token-key "last-trade-output-token"
#vwaio-key "cost-basis-io-ratio"

#amount-is-output
  _: equal-to(amount-token output-token());

#get-cost-basis-io-ratio
  this-total-out-key: hash(order-hash() input-token() output-token()),
  this-vwaio-key: hash(this-total-out-key vwaio-key),
  other-total-out-key: hash(order-hash() output-token() input-token()),
  other-vwaio-key: hash(other-total-out-key vwaio-key),

  this-total-out: get(this-total-out-key),
  other-total-out: get(other-total-out-key),

  this-vwaio: get(this-vwaio-key),
  other-vwaio: get(other-vwaio-key);

#set-cost-basis-io-ratio
  /* first reduce outstanding inventory */
  this-total-out-key
  this-vwaio-key
  other-total-out-key
  other-vwaio-key
  this-total-out
  other-total-out
  this-vwaio
  other-vwaio: call<'get-cost-basis-io-ratio>(),

  other-reduction-out: min(other-total-out input-vault-increase()),
  reduced-other-total-out: sub(other-total-out other-reduction-out),

  :set(other-total-out-key reduced-other-total-out),
  :set(other-vwaio-key every(reduced-other-total-out other-vwaio)),

  /* then increase our inventory */
  this-total-in: mul(this-total-out this-vwaio),
  this-remaining-in: sub(input-vault-increase() other-reduction-out),
  this-new-in: add(this-total-in this-remaining-in),
  this-remaining-out: div(this-remaining-in calculated-io-ratio()),
  this-new-out: add(this-total-out this-remaining-out),
  this-new-vwaio: every(this-new-out div(this-new-in any(this-new-out max-value()))),
  cap-out: if(call<'amount-is-output>() history-cap div(history-cap any(this-new-vwaio calculated-io-ratio()))),
  capped-out: min(this-new-out cap-out),

  :set(this-total-out-key capped-out),
  :set(this-vwaio-key this-new-vwaio);

#halflife
epoch:,
/**
 * Shrinking the multiplier like this
 * then applying it 10 times allows for
 * better precision when max-io-ratio
 * is very large, e.g. ~1e10 or ~1e20+
 *
 * This works because `power` loses
 * precision on base `0.5` when the
 * exponent is large and can even go
 * to `0` while the io-ratio is still
 * large. Better to keep the multiplier
 * higher precision and drop the io-ratio
 * smoothly for as long as we can.
 */
multiplier:
  power(0.5 div(epoch 10)),
val:
  mul(
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
  );

#set-last-trade
last-io:,
:set(hash(order-hash() last-trade-time-key) now()),
:set(hash(order-hash() last-trade-io-key) last-io),
:set(hash(order-hash() last-trade-output-token-key) output-token());

#handle-add-order
using-words-from raindex-subparser
:set(hash(order-hash() last-trade-time-key) now()),
:set(hash(order-hash() last-trade-io-key) initial-io),
:set(hash(order-hash() last-trade-output-token-key) initial-output-token),
this-total-out-key: hash(order-hash() initial-input-token initial-output-token),
:set(this-total-out-key 1e-18),
:set(hash(this-total-out-key vwaio-key) initial-io);

#get-last-trade
stored-last-io:get(hash(order-hash() last-trade-io-key)),
stored-last-output-token:get(hash(order-hash() last-trade-output-token-key)),
last-time:get(hash(order-hash() last-trade-time-key)),
_: if(equal-to(stored-last-output-token output-token()) stored-last-io inv(stored-last-io));

#get-epoch
last-time _: call<'get-last-trade>(),
duration: sub(now() last-time),
epochs: div(duration time-per-epoch);

#amount-for-epoch
epoch io:,
decay: call<'halflife>(epoch),
shy-decay: every(greater-than(epoch shy-epoch) decay),
variable-component: sub(max-amount min-amount),
base-amount: add(min-amount mul(variable-component shy-decay)),
_: if(call<'amount-is-output>() base-amount mul(base-amount inv(io)));

#io-for-epoch
epoch:,
last-io: call<'get-last-trade>(),
this-vwaio
other-vwaio: call<'get-cost-basis-io-ratio>(),
cost-basis-io: mul(any(this-vwaio inv(any(other-vwaio max-value()))) cost-basis-multiplier),
max-next-trade: mul(max(cost-basis-io last-io) next-trade-multiplier),
baseline: any(cost-basis-io last-io),
variable-component: sub(max-next-trade baseline),
decay: call<'halflife>(epoch),
above-baseline: mul(variable-component decay),
_: add(baseline above-baseline);

#calculate-io
using-words-from raindex-subparser
epoch:call<'get-epoch>(),
io: call<'io-for-epoch>(epoch),
epoch-max-output: call<'amount-for-epoch>(epoch io),
other-total-out
_
other-vwaio: call<'get-cost-basis-io-ratio>(),
max-output: max(
  epoch-max-output
  every(
    if(call<'amount-is-output>() amount-is-fast-exit not-amount-is-fast-exit)
    mul(other-total-out other-vwaio))),
_: io,
:call<'set-last-trade>(io);

#handle-io
min-trade-amount: mul(min-amount 0.9),
:ensure(
  greater-than-or-equal-to(
    if(call<'amount-is-output>() output-vault-decrease() input-vault-increase())
    min-trade-amount)
  "Min trade amount."),
:call<'set-cost-basis-io-ratio>();
