version: 2

networks:
  arbitrum:
    rpcs:
      - https://arbitrum-one-rpc.publicnode.com
    chain-id: 42161
    network-id: 42161
    currency: ETH
  arbitrum2:
    rpcs:
      - https://arbitrum-one-rpc.publicnode.com
    chain-id: 42161
    network-id: 42161
    currency: ETH
  bsc:
    rpcs:
      - https://bsc-dataseed.bnbchain.org
    chain-id: 56
    network-id: 56
    currency: BNB
  base:
    rpcs:
      - https://base-rpc.publicnode.com
    chain-id: 8453
    network-id: 8453
    currency: ETH
  base2:
    rpcs:
      - https://base-rpc.publicnode.com
    chain-id: 8453
    network-id: 8453
    currency: ETH
  ethereum:
    rpcs:
      - https://ethereum-rpc.publicnode.com
    chain-id: 1
    network-id: 1
    currency: ETH
  flare:
    rpcs:
      - https://flare.rpc.thirdweb.com
    chain-id: 14
    network-id: 14
    currency: FLR
  polygon:
    rpcs:
      - https://polygon-rpc.com
    chain-id: 137
    network-id: 137
    currency: POL

subgraphs:
  arbitrum: https://example.com/subgraph
  arbitrum2: https://example.com/subgraph
  bsc: https://example.com/subgraph
  base: https://example.com/subgraph
  base2: https://example.com/subgraph
  ethereum: https://example.com/subgraph
  flare: https://example.com/subgraph
  polygon: https://example.com/subgraph

metaboards:
  arbitrum: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-arbitrum/0.1/gn
  arbitrum2: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-arbitrum/0.1/gn
  bsc: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-bsc/0.1/gn
  base: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-base/0.1/gn
  base2: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/ob4-base/2025-07-03-f4dc/gn
  ethereum: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/metadata-mainnet/2024-10-25-2857/gn
  flare: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-flare-0x893BBFB7/0.1/gn
  polygon: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-polygon/0.1/gn

orderbooks:
  arbitrum:
    address: 0x550878091b2B1506069F61ae59e3A5484Bca9166
  arbitrum2:
    address: 0xF6FdCB30FD027C73cBacD54E22f02987E3116eBc
  bsc:
    address: 0xd2938E7c9fe3597F78832CE780Feb61945c377d7
  base:
    address: 0xd2938e7c9fe3597f78832ce780feb61945c377d7
  base2:
    address: 0x7692ba8446bb8b3140a2c02df073080bed0a7f8e
  ethereum:
    address: 0x0eA6d458488d1cf51695e1D6e4744e6FB715d37C
  flare:
    address: 0xCEe8Cd002F151A536394E564b84076c41bBBcD4d
  polygon:
    address: 0x7D2f700b1f6FD75734824EA4578960747bdF269A

deployers:
  arbitrum:
    address: 0x9B0D254bd858208074De3d2DaF5af11b3D2F377F
  arbitrum2:
    address: 0x9B0D254bd858208074De3d2DaF5af11b3D2F377F
  bsc:
    address: 0xA2f56F8F74B7d04d61f281BE6576b6155581dcBA
  base:
    address: 0xC1A14cE2fd58A3A2f99deCb8eDd866204eE07f8D
  base2:
    address: 0xC1A14cE2fd58A3A2f99deCb8eDd866204eE07f8D
  ethereum:
    address: 0xd19581a021f4704ad4eBfF68258e7A0a9DB1CD77
  flare:
    address: 0xE3989Ea7486c0F418C764e6c511e86f6E8830FAb
  polygon:
    address: 0xE7116BC05C8afe25e5B54b813A74F916B5D42aB1

tokens:
  flare-wflr:
    network: flare
    address: 0x1D80c49BbBCd1C0911346656B529DF9E5c2F783d
    decimals: 18
  flare-sflr:
    network: flare
    address: 0x12e605bc104e93B45e1aD99F9e555f659051c2BB
    decimals: 18

orders:
  arbitrum:
    orderbook: arbitrum
    inputs:
      - token: input
    outputs:
      - token: output
  arbitrum2:
    orderbook: arbitrum2
    inputs:
      - token: input
    outputs:
      - token: output
  bsc:
    orderbook: bsc
    inputs:
      - token: input
    outputs:
      - token: output
  base:
    orderbook: base
    inputs:
      - token: input
    outputs:
      - token: output
  base2:
    orderbook: base2
    inputs:
      - token: input
    outputs:
      - token: output
  ethereum:
    orderbook: ethereum
    inputs:
      - token: input
    outputs:
      - token: output
  flare:
    orderbook: flare
    inputs:
      - token: input
    outputs:
      - token: output
  polygon:
    orderbook: polygon
    inputs:
      - token: input
    outputs:
      - token: output
  flare-sflr-wflr:
    orderbook: flare
    inputs:
      - token: flare-sflr
    outputs:
      - token: flare-wflr
  flare-wflr-sflr:
    orderbook: flare
    inputs:
      - token: flare-wflr
    outputs:
      - token: flare-sflr

scenarios:
  arbitrum:
    orderbook: arbitrum
    runs: 1
    bindings:
      raindex-subparser: 0xb06202aA3Fe7d85171fB7aA5f17011d17E63f382
      subparser-0: 0xb06202aA3Fe7d85171fB7aA5f17011d17E63f382
      baseline-fn: '''constant-baseline'
      initial-io-fn: '''constant-initial-io'
      shy-epoch: 0.05
  bsc:
    orderbook: bsc
    runs: 1
    bindings:
      raindex-subparser: 0x662dFd6d5B6DF94E07A60954901D3001c24F856a
      subparser-0: 0x662dFd6d5B6DF94E07A60954901D3001c24F856a
      baseline-fn: '''constant-baseline'
      initial-io-fn: '''constant-initial-io'
      shy-epoch: 0.05
  base:
    orderbook: base
    runs: 1
    bindings:
      raindex-subparser: 0x662dFd6d5B6DF94E07A60954901D3001c24F856a
      subparser-0: 0x662dFd6d5B6DF94E07A60954901D3001c24F856a
      baseline-fn: '''constant-baseline'
      initial-io-fn: '''constant-initial-io'
      shy-epoch: 0.05
  base2:
    orderbook: base2
    runs: 1
    bindings:
      raindex-subparser: 0x07701e3BcE4248EFDFc7D31392a43c8b82a7A260
      subparser-0: 0x07701e3BcE4248EFDFc7D31392a43c8b82a7A260
      baseline-fn: '''constant-baseline'
      initial-io-fn: '''constant-initial-io'
      shy-epoch: 0.05
  polygon:
    orderbook: polygon
    runs: 1
    bindings:
      raindex-subparser: 0xF9323B7d23c655122Fb0272D989b83E105cBcf9d
      subparser-0: 0xF9323B7d23c655122Fb0272D989b83E105cBcf9d
      baseline-fn: '''constant-baseline'
      initial-io-fn: '''constant-initial-io'
      shy-epoch: 0.05
  ethereum:
    orderbook: ethereum
    runs: 1
    bindings:
      raindex-subparser: 0x22410e2a46261a1B1e3899a072f303022801C764
      subparser-0: 0x22410e2a46261a1B1e3899a072f303022801C764
      baseline-fn: '''constant-baseline'
      initial-io-fn: '''constant-initial-io'
      shy-epoch: 0.05
  flare:
    orderbook: flare
    runs: 1
    bindings:
      raindex-subparser: 0xFe2411CDa193D9E4e83A5c234C7Fd320101883aC
      subparser-0: 0x915E36ef882941816356bC3718Df868054F868aD
      baseline-fn: '''constant-baseline'
      initial-io-fn: '''constant-initial-io'
      shy-epoch: 0.05
  flare-sflr-baseline:
    orderbook: flare
    deployer: flare
    runs: 1
    bindings:
      raindex-subparser: 0xFe2411CDa193D9E4e83A5c234C7Fd320101883aC
      subparser-0: 0x915E36ef882941816356bC3718Df868054F868aD
      baseline-fn: '''sflr-baseline'
      initial-io-fn: '''sflr-baseline'
      next-trade-baseline-multiplier: 0
      shy-epoch: 0.05
  flare-sflr-baseline-inv:
    orderbook: flare
    deployer: flare
    runs: 1
    bindings:
      raindex-subparser: 0xFe2411CDa193D9E4e83A5c234C7Fd320101883aC
      subparser-0: 0x915E36ef882941816356bC3718Df868054F868aD
      baseline-fn: '''sflr-baseline-inv'
      initial-io-fn: '''sflr-baseline-inv'
      next-trade-baseline-multiplier: 0
      shy-epoch: 0.05
  pyth-price-baseline-arbitrum:
    orderbook: arbitrum2
    deployer: arbitrum2
    runs: 1
    bindings:
      raindex-subparser: 0xde38AD4b13D5258a5653E530EcDF0cA71B4E8a51
      subparser-0: 0x3bd3a7f1a9045701c5085ad4ca5d945686f7a73b
      baseline-fn: '''pyth-price-baseline'
      initial-io-fn: '''pyth-price-baseline'
      next-trade-baseline-multiplier: 0
      shy-epoch: 0.05
  pyth-price-baseline-arbitrum-inv:
    orderbook: arbitrum2
    deployer: arbitrum2
    runs: 1
    bindings:
      raindex-subparser: 0xde38AD4b13D5258a5653E530EcDF0cA71B4E8a51
      subparser-0: 0x3bd3a7f1a9045701c5085ad4ca5d945686f7a73b
      baseline-fn: '''pyth-price-baseline-inv'
      initial-io-fn: '''pyth-price-baseline-inv'
      next-trade-baseline-multiplier: 0
      shy-epoch: 0.05

deployments:
  arbitrum:
    order: arbitrum
    scenario: arbitrum
  polygon:
    order: polygon
    scenario: polygon
  bsc:
    order: bsc
    scenario: bsc
  base:
    order: base
    scenario: base
  base2:
    order: base2
    scenario: base2
  ethereum:
    order: ethereum
    scenario: ethereum
  flare:
    order: flare
    scenario: flare
  flare-sflr-wflr:
    order: flare-sflr-wflr
    scenario: flare-sflr-baseline
  flare-wflr-sflr:
    order: flare-wflr-sflr
    scenario: flare-sflr-baseline-inv
  arbitrum-pyth:
    order: arbitrum2
    scenario: pyth-price-baseline-arbitrum
  arbitrum-pyth-inv:
    order: arbitrum2
    scenario: pyth-price-baseline-arbitrum-inv

gui:
  name: Auction based cost averaging
  description: https://raw.githubusercontent.com/rainlanguage/rain.strategies/e25bc4876b5ffb8bb28097b0ca66de291c75ff56/src/auction-dca.md
  short-description:  >
    A strategy that aims to fill a time-based budget via looping auctions - useful for breaking up large trades into smaller amounts or smoothing out market volatility for regular investments.
  deployments:
    arbitrum-pyth:
      name: Arbitrum pyth sell shares
      description: Deploy an auction-based cost averaging strategy on Arbitrum using Pyth price feeds to sell shares.
      deposits:
        - token: output
      fields:
        - binding: pyth-pair
          name: Pyth price feed pair
          description: |
            The Pyth price feed pair to use for the auction.
            This is used to determine the baseline and initial IO ratios for the auction.
            For example, if you are selling WETH and buying USDC then you would use the WETH/USD price feed.
          show-custom-field: false
          presets:
            - name: Equity.US.GOOG/USD
              value: 0x924571756974792e55532e474f4f472f55534400000000000000000000000000
            - name: Equity.US.AMZN/USD
              value: 0x924571756974792e55532e414d5a4e2f55534400000000000000000000000000
            - name: Equity.US.AAPL/USD
              value: 0x924571756974792e55532e4141504c2f55534400000000000000000000000000
            - name: Equity.US.MSFT/USD
              value: 0x924571756974792e55532e4d5346542f55534400000000000000000000000000
            - name: Equity.US.TSLA/USD
              value: 0x924571756974792e55532e54534c412f55534400000000000000000000000000
            - name: Equity.US.NVDA/USD
              value: 0x924571756974792e55532e4e5644412f55534400000000000000000000000000
            - name: Equity.US.META/USD
              value: 0x924571756974792e55532e4d4554412f55534400000000000000000000000000
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: |
            The budget is spent over this time period.

            For example, if the budget is daily then this is 86400 seconds (24 * 60 * 60).
          show-custom-field: true
          presets:
            - name: Per minute (60)
              value: 60
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
            - name: Per 30 days (2592000)
              value: 2592000
            - name: Per 365 days (31536000)
              value: 31536000
        - binding: amount-per-epoch
          name: Budget (${order.outputs.0.token.symbol} per period)
          description: |
            The amount of ${order.outputs.0.token.symbol} to spend each budget period.

            For example, if the budget is daily and this is 10 then 10 ${order.outputs.0.token.symbol} will be sold for ${order.inputs.0.token.symbol} each day.
        - binding: max-trade-amount
          name: Maximum trade size (${order.outputs.0.token.symbol})
          description: |
            The maximum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: min-trade-amount
          name: Minimum trade size (${order.outputs.0.token.symbol})
          description: |
            The minimum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: |
            The auction period is the time between each auction price halvening.
          show-custom-field: true
          default: 3600
          presets:
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
            - name: Every 3 hours (10800)
              value: 10800
            - name: Every 6 hours (21600)
              value: 21600
            - name: Every 12 hours (43200)
              value: 43200
            - name: Every 24 hours (86400)
              value: 86400
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: |
            The multiplier to apply to the last trade to kick off the next auction.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
            - name: 1.1x
              value: 1.1
      select-tokens:
        - key: output
          name: Token to Sell
          description: Select the token you want to sell
        - key: input
          name: Token to Buy
          description: Select the token you want to purchase
    arbitrum-pyth-inv:
      name: Arbitrum pyth buy shares
      description: Deploy an auction-based cost averaging strategy on Arbitrum using Pyth price feeds to buy shares.
      deposits:
        - token: output
      fields:
        - binding: pyth-pair
          name: Pyth price feed pair
          description: |
            The Pyth price feed pair to use for the auction.
            This is used to determine the baseline and initial IO ratios for the auction.
            For example, if you are buying WETH and selling USDC then you would use the WETH/USD price feed.
          show-custom-field: false
          presets:
            - name: Equity.US.GOOG/USD
              value: 0x924571756974792e55532e474f4f472f55534400000000000000000000000000
            - name: Equity.US.AMZN/USD
              value: 0x924571756974792e55532e414d5a4e2f55534400000000000000000000000000
            - name: Equity.US.AAPL/USD
              value: 0x924571756974792e55532e4141504c2f55534400000000000000000000000000
            - name: Equity.US.MSFT/USD
              value: 0x924571756974792e55532e4d5346542f55534400000000000000000000000000
            - name: Equity.US.TSLA/USD
              value: 0x924571756974792e55532e54534c412f55534400000000000000000000000000
            - name: Equity.US.NVDA/USD
              value: 0x924571756974792e55532e4e5644412f55534400000000000000000000000000
            - name: Equity.US.META/USD
              value: 0x924571756974792e55532e4d4554412f55534400000000000000000000000000
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: |
            The budget is spent over this time period.

            For example, if the budget is daily then this is 86400 seconds (24 * 60 * 60).
          show-custom-field: true
          presets:
            - name: Per minute (60)
              value: 60
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
            - name: Per 30 days (2592000)
              value: 2592000
            - name: Per 365 days (31536000)
              value: 31536000
        - binding: amount-per-epoch
          name: Budget (${order.outputs.0.token.symbol} per period)
          description: |
            The amount of ${order.outputs.0.token.symbol} to spend each budget period.

            For example, if the budget is daily and this is 10 then 10 ${order.outputs.0.token.symbol} will be sold for ${order.inputs.0.token.symbol} each day.
        - binding: max-trade-amount
          name: Maximum trade size (${order.outputs.0.token.symbol})
          description: |
            The maximum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: min-trade-amount
          name: Minimum trade size (${order.outputs.0.token.symbol})
          description: |
            The minimum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: |
            The auction period is the time between each auction price halvening.
          show-custom-field: true
          default: 3600
          presets:
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
            - name: Every 3 hours (10800)
              value: 10800
            - name: Every 6 hours (21600)
              value: 21600
            - name: Every 12 hours (43200)
              value: 43200
            - name: Every 24 hours (86400)
              value: 86400
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: |
            The multiplier to apply to the last trade to kick off the next auction.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
            - name: 1.1x
              value: 1.1
      select-tokens:
        - key: output
          name: Token to Sell
          description: Select the token you want to sell
        - key: input
          name: Token to Buy
          description: Select the token you want to purchase
    arbitrum:
      name: Arbitrum
      description: Deploy an auction-based cost averaging strategy on Arbitrum.
      deposits:
        - token: output
      fields:
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: |
            The budget is spent over this time period.

            For example, if the budget is daily then this is 86400 seconds (24 * 60 * 60).
          show-custom-field: true
          presets:
            - name: Per minute (60)
              value: 60
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
            - name: Per 30 days (2592000)
              value: 2592000
            - name: Per 365 days (31536000)
              value: 31536000
        - binding: amount-per-epoch
          name: Budget (${order.outputs.0.token.symbol} per period)
          description: |
            The amount of ${order.outputs.0.token.symbol} to spend each budget period.

            For example, if the budget is daily and this is 10 then 10 ${order.outputs.0.token.symbol} will be sold for ${order.inputs.0.token.symbol} each day.
        - binding: max-trade-amount
          name: Maximum trade size (${order.outputs.0.token.symbol})
          description: |
            The maximum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: min-trade-amount
          name: Minimum trade size (${order.outputs.0.token.symbol})
          description: |
            The minimum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: |
            The auction period is the time between each auction price halvening.
          show-custom-field: true
          default: 3600
          presets:
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
            - name: Every 3 hours (10800)
              value: 10800
            - name: Every 6 hours (21600)
              value: 21600
            - name: Every 12 hours (43200)
              value: 43200
            - name: Every 24 hours (86400)
              value: 86400
        - binding: baseline
          name: Baseline ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol}
          description: |
            The absolute minimum amount of ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol} that the auction will trade at.

            I.e. for each 1 ${order.outputs.0.token.symbol} sold you will receive at least this many ${order.inputs.0.token.symbol}.

            I.e. this is calculated as the ${order.outputs.0.token.symbol} $ price divided by the ${order.inputs.0.token.symbol} $ price.
            You can find $ prices for most tokens on dex tools, dex screener and gecko terminal.

            For more information about IO ratios and how to calculate them see [Understanding IO Ratios](https://youtu.be/NdPOi1ZDnDk).
        - binding: initial-io
          name: Kickoff ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol}
          description: |
            The initial ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol} to kickoff the first auction.

            This ratio is calculated in the same way as the baseline ratio.

            It must be greater than the baseline ratio, regardless of what you are selling or buying.
            This is because getting more input per output is always better for you.
            The initial auction will start high (at the value you set here) and then drop to the baseline ratio over time.
            Subsequent auctions will start at some % above the last auction price and drop to the baseline ratio over time.
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: |
            The multiplier to apply to the last trade to kick off the next auction.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
            - name: 1.1x
              value: 1.1
        - binding: next-trade-baseline-multiplier
          name: Auction end multiplier
          description: |
            The multiplier to apply to the last trade to set the baseline for the next auction.
          show-custom-field: true
          default: 0
          presets:
            - name: Disabled (0)
              value: 0
            - name: 0.7x
              value: 0.7
            - name: 0.8x
              value: 0.8
            - name: 0.9x
              value: 0.9
            - name: 0.95x
              value: 0.95
            - name: 0.99x
              value: 0.99
      select-tokens:
        - key: output
          name: Token to Sell
          description: Select the token you want to sell
        - key: input
          name: Token to Buy
          description: Select the token you want to purchase


    polygon:
      name: Polygon
      description: Deploy an auction-based cost averaging strategy on Polygon.
      deposits:
        - token: output
      fields:
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: |
            The budget is spent over this time period.

            For example, if the budget is daily then this is 86400 seconds (24 * 60 * 60).
          show-custom-field: true
          presets:
            - name: Per minute (60)
              value: 60
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
            - name: Per 30 days (2592000)
              value: 2592000
            - name: Per 365 days (31536000)
              value: 31536000
        - binding: amount-per-epoch
          name: Budget (${order.outputs.0.token.symbol} per period)
          description: |
            The amount of ${order.outputs.0.token.symbol} to spend each budget period.

            For example, if the budget is daily and this is 10 then 10 ${order.outputs.0.token.symbol} will be sold for ${order.inputs.0.token.symbol} each day.
        - binding: max-trade-amount
          name: Maximum trade size (${order.outputs.0.token.symbol})
          description: |
            The maximum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: min-trade-amount
          name: Minimum trade size (${order.outputs.0.token.symbol})
          description: |
            The minimum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: |
            The auction period is the time between each auction price halvening.
          show-custom-field: true
          default: 3600
          presets:
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
            - name: Every 3 hours (10800)
              value: 10800
            - name: Every 6 hours (21600)
              value: 21600
            - name: Every 12 hours (43200)
              value: 43200
            - name: Every 24 hours (86400)
              value: 86400
        - binding: baseline
          name: Baseline ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol}
          description: |
            The absolute minimum amount of ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol} that the auction will trade at.

            I.e. for each 1 ${order.outputs.0.token.symbol} sold you will receive at least this many ${order.inputs.0.token.symbol}.

            I.e. this is calculated as the ${order.outputs.0.token.symbol} $ price divided by the ${order.inputs.0.token.symbol} $ price.
            You can find $ prices for most tokens on dex tools, dex screener and gecko terminal.

            For more information about IO ratios and how to calculate them see [Understanding IO Ratios](https://youtu.be/NdPOi1ZDnDk).
        - binding: initial-io
          name: Kickoff ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol}
          description: |
            The initial ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol} to kickoff the first auction.

            This ratio is calculated in the same way as the baseline ratio.

            It must be greater than the baseline ratio, regardless of what you are selling or buying.
            This is because getting more input per output is always better for you.
            The initial auction will start high (at the value you set here) and then drop to the baseline ratio over time.
            Subsequent auctions will start at some % above the last auction price and drop to the baseline ratio over time.
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: |
            The multiplier to apply to the last trade to kick off the next auction.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
            - name: 1.1x
              value: 1.1
        - binding: next-trade-baseline-multiplier
          name: Auction end multiplier
          description: |
            The multiplier to apply to the last trade to set the baseline for the next auction.
          show-custom-field: true
          default: 0
          presets:
            - name: Disabled (0)
              value: 0
            - name: 0.7x
              value: 0.7
            - name: 0.8x
              value: 0.8
            - name: 0.9x
              value: 0.9
            - name: 0.95x
              value: 0.95
            - name: 0.99x
              value: 0.99
      select-tokens:
        - key: output
          name: Token to Sell
          description: Select the token you want to sell
        - key: input
          name: Token to Buy
          description: Select the token you want to purchase

    bsc:
      name: BSC
      description: Deploy an auction-based cost averaging strategy on BSC.
      deposits:
        - token: output
      fields:
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: |
            The budget is spent over this time period.

            For example, if the budget is daily then this is 86400 seconds (24 * 60 * 60).
          show-custom-field: true
          presets:
            - name: Per minute (60)
              value: 60
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
            - name: Per 30 days (2592000)
              value: 2592000
            - name: Per 365 days (31536000)
              value: 31536000
        - binding: amount-per-epoch
          name: Budget (${order.outputs.0.token.symbol} per period)
          description: |
            The amount of ${order.outputs.0.token.symbol} to spend each budget period.

            For example, if the budget is daily and this is 10 then 10 ${order.outputs.0.token.symbol} will be sold for ${order.inputs.0.token.symbol} each day.
        - binding: max-trade-amount
          name: Maximum trade size (${order.outputs.0.token.symbol})
          description: |
            The maximum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: min-trade-amount
          name: Minimum trade size (${order.outputs.0.token.symbol})
          description: |
            The minimum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: |
            The auction period is the time between each auction price halvening.
          show-custom-field: true
          default: 3600
          presets:
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
            - name: Every 3 hours (10800)
              value: 10800
            - name: Every 6 hours (21600)
              value: 21600
            - name: Every 12 hours (43200)
              value: 43200
            - name: Every 24 hours (86400)
              value: 86400
        - binding: baseline
          name: Baseline ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol}
          description: |
            The absolute minimum amount of ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol} that the auction will trade at.

            I.e. for each 1 ${order.outputs.0.token.symbol} sold you will receive at least this many ${order.inputs.0.token.symbol}.

            I.e. this is calculated as the ${order.outputs.0.token.symbol} $ price divided by the ${order.inputs.0.token.symbol} $ price.
            You can find $ prices for most tokens on dex tools, dex screener and gecko terminal.

            For more information about IO ratios and how to calculate them see [Understanding IO Ratios](https://youtu.be/NdPOi1ZDnDk).
        - binding: initial-io
          name: Kickoff ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol}
          description: |
            The initial ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol} to kickoff the first auction.

            This ratio is calculated in the same way as the baseline ratio.

            It must be greater than the baseline ratio, regardless of what you are selling or buying.
            This is because getting more input per output is always better for you.
            The initial auction will start high (at the value you set here) and then drop to the baseline ratio over time.
            Subsequent auctions will start at some % above the last auction price and drop to the baseline ratio over time.
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: |
            The multiplier to apply to the last trade to kick off the next auction.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
            - name: 1.1x
              value: 1.1
        - binding: next-trade-baseline-multiplier
          name: Auction end multiplier
          description: |
            The multiplier to apply to the last trade to set the baseline for the next auction.
          show-custom-field: true
          default: 0
          presets:
            - name: Disabled (0)
              value: 0
            - name: 0.7x
              value: 0.7
            - name: 0.8x
              value: 0.8
            - name: 0.9x
              value: 0.9
            - name: 0.95x
              value: 0.95
            - name: 0.99x
              value: 0.99
      select-tokens:
        - key: output
          name: Token to Sell
          description: Select the token you want to sell
        - key: input
          name: Token to Buy
          description: Select the token you want to purchase

    base:
      name: Base
      description: Deploy an auction-based cost averaging strategy on Base.
      deposits:
        - token: output
      fields:
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: |
            The budget is spent over this time period.

            For example, if the budget is daily then this is 86400 seconds (24 * 60 * 60).
          show-custom-field: true
          presets:
            - name: Per minute (60)
              value: 60
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
            - name: Per 30 days (2592000)
              value: 2592000
            - name: Per 365 days (31536000)
              value: 31536000
        - binding: amount-per-epoch
          name: Budget (${order.outputs.0.token.symbol} per period)
          description: |
            The amount of ${order.outputs.0.token.symbol} to spend each budget period.

            For example, if the budget is daily and this is 10 then 10 ${order.outputs.0.token.symbol} will be sold for ${order.inputs.0.token.symbol} each day.
        - binding: max-trade-amount
          name: Maximum trade size (${order.outputs.0.token.symbol})
          description: |
            The maximum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: min-trade-amount
          name: Minimum trade size (${order.outputs.0.token.symbol})
          description: |
            The minimum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: |
            The auction period is the time between each auction price halvening.
          show-custom-field: true
          default: 3600
          presets:
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
            - name: Every 3 hours (10800)
              value: 10800
            - name: Every 6 hours (21600)
              value: 21600
            - name: Every 12 hours (43200)
              value: 43200
            - name: Every 24 hours (86400)
              value: 86400
        - binding: baseline
          name: Baseline ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol}
          description: |
            The absolute minimum amount of ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol} that the auction will trade at.

            I.e. for each 1 ${order.outputs.0.token.symbol} sold you will receive at least this many ${order.inputs.0.token.symbol}.

            I.e. this is calculated as the ${order.outputs.0.token.symbol} $ price divided by the ${order.inputs.0.token.symbol} $ price.
            You can find $ prices for most tokens on dex tools, dex screener and gecko terminal.

            For more information about IO ratios and how to calculate them see [Understanding IO Ratios](https://youtu.be/NdPOi1ZDnDk).
        - binding: initial-io
          name: Kickoff ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol}
          description: |
            The initial ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol} to kickoff the first auction.

            This ratio is calculated in the same way as the baseline ratio.

            It must be greater than the baseline ratio, regardless of what you are selling or buying.
            This is because getting more input per output is always better for you.
            The initial auction will start high (at the value you set here) and then drop to the baseline ratio over time.
            Subsequent auctions will start at some % above the last auction price and drop to the baseline ratio over time.
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: |
            The multiplier to apply to the last trade to kick off the next auction.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
            - name: 1.1x
              value: 1.1
        - binding: next-trade-baseline-multiplier
          name: Auction end multiplier
          description: |
            The multiplier to apply to the last trade to set the baseline for the next auction.
          show-custom-field: true
          default: 0
          presets:
            - name: Disabled (0)
              value: 0
            - name: 0.7x
              value: 0.7
            - name: 0.8x
              value: 0.8
            - name: 0.9x
              value: 0.9
            - name: 0.95x
              value: 0.95
            - name: 0.99x
              value: 0.99
      select-tokens:
        - key: output
          name: Token to Sell
          description: Select the token you want to sell
        - key: input
          name: Token to Buy
          description: Select the token you want to purchase

    base2:
      name: Base with updated orderbook
      description: Deploy an auction-based cost averaging strategy on Base with update orderbook.
      deposits:
        - token: output
      fields:
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: |
            The budget is spent over this time period.

            For example, if the budget is daily then this is 86400 seconds (24 * 60 * 60).
          show-custom-field: true
          presets:
            - name: Per minute (60)
              value: 60
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
            - name: Per 30 days (2592000)
              value: 2592000
            - name: Per 365 days (31536000)
              value: 31536000
        - binding: amount-per-epoch
          name: Budget (${order.outputs.0.token.symbol} per period)
          description: |
            The amount of ${order.outputs.0.token.symbol} to spend each budget period.

            For example, if the budget is daily and this is 10 then 10 ${order.outputs.0.token.symbol} will be sold for ${order.inputs.0.token.symbol} each day.
        - binding: max-trade-amount
          name: Maximum trade size (${order.outputs.0.token.symbol})
          description: |
            The maximum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: min-trade-amount
          name: Minimum trade size (${order.outputs.0.token.symbol})
          description: |
            The minimum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: |
            The auction period is the time between each auction price halvening.
          show-custom-field: true
          default: 3600
          presets:
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
            - name: Every 3 hours (10800)
              value: 10800
            - name: Every 6 hours (21600)
              value: 21600
            - name: Every 12 hours (43200)
              value: 43200
            - name: Every 24 hours (86400)
              value: 86400
        - binding: baseline
          name: Baseline ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol}
          description: |
            The absolute minimum amount of ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol} that the auction will trade at.

            I.e. for each 1 ${order.outputs.0.token.symbol} sold you will receive at least this many ${order.inputs.0.token.symbol}.

            I.e. this is calculated as the ${order.outputs.0.token.symbol} $ price divided by the ${order.inputs.0.token.symbol} $ price.
            You can find $ prices for most tokens on dex tools, dex screener and gecko terminal.

            For more information about IO ratios and how to calculate them see [Understanding IO Ratios](https://youtu.be/NdPOi1ZDnDk).
        - binding: initial-io
          name: Kickoff ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol}
          description: |
            The initial ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol} to kickoff the first auction.

            This ratio is calculated in the same way as the baseline ratio.

            It must be greater than the baseline ratio, regardless of what you are selling or buying.
            This is because getting more input per output is always better for you.
            The initial auction will start high (at the value you set here) and then drop to the baseline ratio over time.
            Subsequent auctions will start at some % above the last auction price and drop to the baseline ratio over time.
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: |
            The multiplier to apply to the last trade to kick off the next auction.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
            - name: 1.1x
              value: 1.1
        - binding: next-trade-baseline-multiplier
          name: Auction end multiplier
          description: |
            The multiplier to apply to the last trade to set the baseline for the next auction.
          show-custom-field: true
          default: 0
          presets:
            - name: Disabled (0)
              value: 0
            - name: 0.7x
              value: 0.7
            - name: 0.8x
              value: 0.8
            - name: 0.9x
              value: 0.9
            - name: 0.95x
              value: 0.95
            - name: 0.99x
              value: 0.99
      select-tokens:
        - key: output
          name: Token to Sell
          description: Select the token you want to sell
        - key: input
          name: Token to Buy
          description: Select the token you want to purchase


    ethereum:
      name: Ethereum
      description: Deploy an auction-based cost averaging strategy on Ethereum.
      deposits:
        - token: output
      fields:
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: |
            The budget is spent over this time period.

            For example, if the budget is daily then this is 86400 seconds (24 * 60 * 60).
          show-custom-field: true
          presets:
            - name: Per minute (60)
              value: 60
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
            - name: Per 30 days (2592000)
              value: 2592000
            - name: Per 365 days (31536000)
              value: 31536000
        - binding: amount-per-epoch
          name: Budget (${order.outputs.0.token.symbol} per period)
          description: |
            The amount of ${order.outputs.0.token.symbol} to spend each budget period.

            For example, if the budget is daily and this is 10 then 10 ${order.outputs.0.token.symbol} will be sold for ${order.inputs.0.token.symbol} each day.
        - binding: max-trade-amount
          name: Maximum trade size (${order.outputs.0.token.symbol})
          description: |
            The maximum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: min-trade-amount
          name: Minimum trade size (${order.outputs.0.token.symbol})
          description: |
            The minimum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: |
            The auction period is the time between each auction price halvening.
          show-custom-field: true
          default: 3600
          presets:
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
            - name: Every 3 hours (10800)
              value: 10800
            - name: Every 6 hours (21600)
              value: 21600
            - name: Every 12 hours (43200)
              value: 43200
            - name: Every 24 hours (86400)
              value: 86400
        - binding: baseline
          name: Baseline ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol}
          description: |
            The absolute minimum amount of ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol} that the auction will trade at.

            I.e. for each 1 ${order.outputs.0.token.symbol} sold you will receive at least this many ${order.inputs.0.token.symbol}.

            I.e. this is calculated as the ${order.outputs.0.token.symbol} $ price divided by the ${order.inputs.0.token.symbol} $ price.
            You can find $ prices for most tokens on dex tools, dex screener and gecko terminal.

            For more information about IO ratios and how to calculate them see [Understanding IO Ratios](https://youtu.be/NdPOi1ZDnDk).
        - binding: initial-io
          name: Kickoff ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol}
          description: |
            The initial ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol} to kickoff the first auction.

            This ratio is calculated in the same way as the baseline ratio.

            It must be greater than the baseline ratio, regardless of what you are selling or buying.
            This is because getting more input per output is always better for you.
            The initial auction will start high (at the value you set here) and then drop to the baseline ratio over time.
            Subsequent auctions will start at some % above the last auction price and drop to the baseline ratio over time.
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: |
            The multiplier to apply to the last trade to kick off the next auction.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
            - name: 1.1x
              value: 1.1
        - binding: next-trade-baseline-multiplier
          name: Auction end multiplier
          description: |
            The multiplier to apply to the last trade to set the baseline for the next auction.
          show-custom-field: true
          default: 0
          presets:
            - name: Disabled (0)
              value: 0
            - name: 0.7x
              value: 0.7
            - name: 0.8x
              value: 0.8
            - name: 0.9x
              value: 0.9
            - name: 0.95x
              value: 0.95
            - name: 0.99x
              value: 0.99
      select-tokens:
        - key: output
          name: Token to Sell
          description: Select the token you want to sell
        - key: input
          name: Token to Buy
          description: Select the token you want to purchase

    flare:
      name: Flare
      description: Deploy an auction-based cost averaging strategy on Flare.
      deposits:
        - token: output
      fields:
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: |
            The budget is spent over this time period.

            For example, if the budget is daily then this is 86400 seconds (24 * 60 * 60).
          show-custom-field: true
          presets:
            - name: Per minute (60)
              value: 60
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
            - name: Per 30 days (2592000)
              value: 2592000
            - name: Per 365 days (31536000)
              value: 31536000
        - binding: amount-per-epoch
          name: Budget (${order.outputs.0.token.symbol} per period)
          description: |
            The amount of ${order.outputs.0.token.symbol} to spend each budget period.

            For example, if the budget is daily and this is 10 then 10 ${order.outputs.0.token.symbol} will be sold for ${order.inputs.0.token.symbol} each day.
        - binding: max-trade-amount
          name: Maximum trade size (${order.outputs.0.token.symbol})
          description: |
            The maximum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: min-trade-amount
          name: Minimum trade size (${order.outputs.0.token.symbol})
          description: |
            The minimum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: |
            The auction period is the time between each auction price halvening.
          show-custom-field: true
          default: 3600
          presets:
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
            - name: Every 3 hours (10800)
              value: 10800
            - name: Every 6 hours (21600)
              value: 21600
            - name: Every 12 hours (43200)
              value: 43200
            - name: Every 24 hours (86400)
              value: 86400
        - binding: baseline
          name: Baseline ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol}
          description: |
            The absolute minimum amount of ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol} that the auction will trade at.

            I.e. for each 1 ${order.outputs.0.token.symbol} sold you will receive at least this many ${order.inputs.0.token.symbol}.

            I.e. this is calculated as the ${order.outputs.0.token.symbol} $ price divided by the ${order.inputs.0.token.symbol} $ price.
            You can find $ prices for most tokens on dex tools, dex screener and gecko terminal.

            For more information about IO ratios and how to calculate them see [Understanding IO Ratios](https://youtu.be/NdPOi1ZDnDk).
        - binding: initial-io
          name: Kickoff ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol}
          description: |
            The initial ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol} to kickoff the first auction.

            This ratio is calculated in the same way as the baseline ratio.

            It must be greater than the baseline ratio, regardless of what you are selling or buying.
            This is because getting more input per output is always better for you.
            The initial auction will start high (at the value you set here) and then drop to the baseline ratio over time.
            Subsequent auctions will start at some % above the last auction price and drop to the baseline ratio over time.
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: |
            The multiplier to apply to the last trade to kick off the next auction.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
            - name: 1.1x
              value: 1.1
        - binding: next-trade-baseline-multiplier
          name: Auction end multiplier
          description: |
            The multiplier to apply to the last trade to set the baseline for the next auction.
          show-custom-field: true
          default: 0
          presets:
            - name: Disabled (0)
              value: 0
            - name: 0.7x
              value: 0.7
            - name: 0.8x
              value: 0.8
            - name: 0.9x
              value: 0.9
            - name: 0.95x
              value: 0.95
            - name: 0.99x
              value: 0.99
      select-tokens:
        - key: output
          name: Token to Sell
          description: Select the token you want to sell
        - key: input
          name: Token to Buy
          description: Select the token you want to purchase

    flare-sflr-wflr:
      name: Sell WFLR for SFLR on Flare based on underlying collateral.
      description: |
        Swap WFLR for SFLR on Flare based on underlying collateral.
      deposits:
        - token: flare-wflr
      fields:
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: |
            The budget is spent over this time period.
          show-custom-field: true
          presets:
            - name: Per minute (60)
              value: 60
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
        - binding: amount-per-epoch
          name: Budget (WFLR per period)
          description: |
            The amount of WFLR to spend each budget period.
        - binding: max-trade-amount
          name: Maximum trade size (WFLR)
          description: |
            The maximum amount of WFLR to sell in a single auction.
        - binding: min-trade-amount
          name: Minimum trade size (WFLR)
          description: |
            The minimum amount of WFLR to sell in a single auction.
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: |
            The auction period is the time between each auction price halvening.
          show-custom-field: true
          default: 3600
          presets:
            - name: Every half hour (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: |
            The multiplier to apply to the last trade to kick off the next auction.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05

    flare-wflr-sflr:
      name: Sell SFLR for WFLR on Flare based on underlying collateral.
      description: |
        Swap SFLR for WFLR on Flare based on underlying collateral.
      deposits:
        - token: flare-sflr
      fields:
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: |
            The budget is spent over this time period.
          show-custom-field: true
          presets:
            - name: Per minute (60)
              value: 60
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
        - binding: amount-per-epoch
          name: Budget (SFLR per period)
          description: |
            The amount of SFLR to spend each budget period.
        - binding: max-trade-amount
          name: Maximum trade size (SFLR)
          description: |
            The maximum amount of SFLR to sell in a single auction.
        - binding: min-trade-amount
          name: Minimum trade size (SFLR)
          description: |
            The minimum amount of SFLR to sell in a single auction.
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: |
            The auction period is the time between each auction price halvening.
          show-custom-field: true
          default: 3600
          presets:
            - name: Every half hour (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: |
            The multiplier to apply to the last trade to kick off the next auction.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05

---
#raindex-subparser !Raindex subparser.
#subparser-0 !Subparser 0.

#time-per-amount-epoch !Duration of one unit of streaming amount halflife.
#amount-per-epoch !Amount of output token to approve for buying per epoch.
#min-trade-amount !Each trade must be at least this many output tokens.
#max-trade-amount !Each trade will be capped at this many tokens.

#time-per-trade-epoch !Duration of one unit of io ratio halflife.
#shy-epoch !Epoch below which only the minimum amount is offered.

#start-price-input !Price of the input token to start trading.
#start-price-output !Price of the output token to start trading.
#baseline-relative-ratio !Ratio of the start price to use as the baseline.
#initial-relative-ratio !Ratio of the start price to use as the initial io ratio.

#initial-io !Initial io ratio to use for the first trade. Must be greater than baseline.
#baseline !Baseline io ratio to use for the first trade.

#baseline-fn !Function to calculate the baseline for the next trade.
#initial-io-fn !Function to calculate the initial io ratio for the first trade.

#next-trade-multiplier !Start next auction at this x the last trade.
#next-trade-baseline-multiplier !Lifts the baseline to here relative to the previous trade.

#pyth-pair !The pyth pair to use for the price feed.

#last-trade-time-key "last-trade-time"
#last-trade-io-key "last-trade-io"
#initial-time-key "initial-time"
#amount-used-key "amount-used"

#set-last-trade
last-io:,
:set(hash(order-hash() last-trade-time-key) now()),
:set(hash(order-hash() last-trade-io-key) last-io);

#set-initial-time
:set(hash(order-hash() initial-time-key) now());

#get-initial-time
_:get(hash(order-hash() initial-time-key));

#get-last-trade
last-time:get(hash(order-hash() last-trade-time-key)),
last-io:get(hash(order-hash() last-trade-io-key));

#get-epoch
initial-time: call<'get-initial-time>(),
last-time _: call<'get-last-trade>(),
duration: sub(now() any(last-time initial-time)),
total-duration: sub(now() initial-time),
ratio-freeze-amount-epochs: div(min-trade-amount amount-per-epoch),
ratio-freeze-trade-epochs: mul(ratio-freeze-amount-epochs div(time-per-amount-epoch time-per-trade-epoch)),
amount-epochs: div(total-duration time-per-amount-epoch),
trade-epochs: saturating-sub(div(duration time-per-trade-epoch) ratio-freeze-trade-epochs);

#amount-for-epoch
amount-epochs
trade-epochs:,
total-available: linear-growth(0 amount-per-epoch amount-epochs),
used: get(hash(order-hash() amount-used-key)),
unused: sub(total-available used),
decay: call<'halflife>(trade-epochs),
shy-decay: every(greater-than(trade-epochs shy-epoch) decay),
variable-component: sub(max-trade-amount min-trade-amount),
target-amount: add(min-trade-amount mul(variable-component shy-decay)),
capped-unused: min(unused target-amount);

#halflife
epoch:,
/**
 * Shrinking the multiplier like this
 * then applying it 10 times allows for
 * better precision when max-io-ratio
 * is very large, e.g. ~1e10 or ~1e20+
 *
 * This works because `power` loses
 * precision on base `0.5` when the
 * exponent is large and can even go
 * to `0` while the io-ratio is still
 * large. Better to keep the multiplier
 * higher precision and drop the io-ratio
 * smoothly for as long as we can.
 */
multiplier:
  power(0.5 div(epoch 10)),
val:
  mul(
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
  );

#io-for-epoch
epoch:,
last-io: call<'get-last-trade>(),
max-next-trade: any(mul(last-io next-trade-multiplier) call<'initial-io-fn>()),
baseline-next-trade: mul(last-io next-trade-baseline-multiplier),
real-baseline: max(baseline-next-trade call<'baseline-fn>()),
variable-component: saturating-sub(max-next-trade real-baseline),
above-baseline: mul(variable-component call<'halflife>(epoch)),
_: add(real-baseline above-baseline);

#constant-initial-io
_: initial-io;

#constant-baseline
_: baseline;

#start-price-io-ratio
/**
 * ( usd / output ) / ( usd / input )
 * = ( usd / output ) * ( input / usd )
 * = ( usd * input ) / ( output * usd )
 * = input / output
 */
_: div(start-price-output start-price-input);

#start-price-relative-baseline
start-ratio: call<'start-price-io-ratio>(),
_: mul(baseline-relative-ratio start-ratio);

#start-price-relative-initial
start-ratio: call<'start-price-io-ratio>(),
_: mul(initial-relative-ratio start-ratio);

#sflr-baseline
_: sflr-exchange-rate();

#sflr-baseline-inv
_: inv(sflr-exchange-rate());

#pyth-price-baseline
_: pyth-price(pyth-pair 3600);

#pyth-price-baseline-inv
_: inv(pyth-price(pyth-pair 3600));

#handle-add-order
using-words-from raindex-subparser subparser-0
:call<'set-initial-time>();

#calculate-io
using-words-from raindex-subparser subparser-0
amount-epochs
trade-epochs:call<'get-epoch>(),
max-output: call<'amount-for-epoch>(amount-epochs trade-epochs),
io: call<'io-for-epoch>(trade-epochs),
:call<'set-last-trade>(io);

#handle-io
min-amount: mul(min-trade-amount 0.9),
:ensure(greater-than-or-equal-to(output-vault-decrease() min-amount) "Min trade amount."),
used: get(hash(order-hash() amount-used-key)),
:set(hash(order-hash() amount-used-key) add(used output-vault-decrease()));
