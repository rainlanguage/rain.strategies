orders:
  arbitrum:
    orderbook: arbitrum
    inputs:
      - token: token1
    outputs:
      - token: token2

scenarios:
  arbitrum:
    orderbook: arbitrum
    runs: 1
    bindings:
      raindex-subparser: 0xe80e7438ce6b1055c8e9CDE1b6336a4F9D53C666
      fixed-io-output-token: ${order.outputs.0.token.address}

deployments:
  arbitrum:
    order: arbitrum
    scenario: arbitrum

using-tokens-from:
  - https://tokens.coingecko.com/arbitrum-one/all.json

gui:
  name: Fixed limit
  description: A very simple order that places a limit order at a fixed price.
  short-description: A very simple order that places a limit order at a fixed price.
  deployments:
    arbitrum:
      name: Arbitrum
      description: Deploy a limit order on Arbitrum.
      deposits:
        - token: token2
      fields:
        - binding: fixed-io
          name: ${order.inputs.0.token.symbol} per ${order.outputs.0.token.symbol}
          description: Fixed exchange rate (${order.inputs.0.token.symbol} received per 1 ${order.outputs.0.token.symbol} sold)
      select-tokens:
        - key: token1
          name: Token to Buy
          description: Select the token you want to purchase
        - key: token2
          name: Token to Sell
          description: Select the token you want to sell

---
#raindex-subparser !The subparser to use.

#fixed-io !The io ratio for the limit order.
#fixed-io-output-token !The output token that the fixed io is for. If this doesn't match the runtime output then the fixed-io will be inverted.

#calculate-io
using-words-from raindex-subparser
max-output: max-value(),
io: if(
  equal-to(
    output-token()
    fixed-io-output-token
  )
  fixed-io
  inv(fixed-io)
);

#handle-io
:;

#handle-add-order
:;
